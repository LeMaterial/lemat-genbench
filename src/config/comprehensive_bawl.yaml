type: comprehensive

# This config runs all benchmark families using short-BAWL fingerprinting
# Use --families argument to specify only specific families
# Validity benchmark and preprocessor are ALWAYS run automatically

# Validity benchmark settings (always run - updated to match new implementation)
validity_settings:
  charge_tolerance: 0.1
  distance_scaling: 0.5
  min_atomic_density: 0.00001
  max_atomic_density: 0.5
  min_mass_density: 0.01
  max_mass_density: 25.0
  check_format: true
  check_symmetry: true

# Distribution benchmark settings
mlips: ["orb", "mace", "uma"]
cache_dir: "./data"
js_distributions_file: "data/lematbulk_jsdistance_distributions.json"
mmd_values_file: "data/lematbulk_mmd_values_15k.pkl"

# Fingerprinting method configuration
fingerprint_method: "short-bawl"

# Novelty benchmark settings (using short-BAWL fingerprinting)
novelty_settings:
  reference_dataset: "LeMaterial/LeMat-Bulk"
  reference_config: "compatible_pbe"
  cache_reference: true
  max_reference_size: null
  n_jobs: 1

# Uniqueness benchmark settings (using short-BAWL fingerprinting)
uniqueness_settings:
  n_jobs: 1

# SUN benchmark settings (using short-BAWL fingerprinting)
sun_settings:
  stability_threshold: 0.0
  metastability_threshold: 0.1
  include_metasun: true
  reference_dataset: "LeMaterial/LeMat-Bulk"
  reference_config: "compatible_pbe"
  cache_reference: true
  max_reference_size: null

# HHI benchmark settings
hhi_settings:
  production_weight: 0.25
  reserve_weight: 0.75
  scale_to_0_10: true

# Multi-MLIP stability settings
stability_settings:
  use_ensemble: true
  metastable_threshold: 0.1
  ensemble_config:
    min_mlips_required: 2
  individual_mlip_config:
    use_all_available: true
    require_all_mlips: false
    fallback_to_single: true

# Preprocessor settings
fingerprint_preprocessor_settings:
  fingerprint_method: "short-bawl"
  n_jobs: 1

# Metadata
description: "Comprehensive benchmark configuration using short-BAWL fingerprinting"
version: "1.0.0"
metadata:
  reference: "Comprehensive evaluation using short-BAWL structure fingerprinting"
  use_case: "Full evaluation across validity, distribution, novelty, uniqueness, and stability metrics using short-BAWL"
  fingerprinting_method: "short-bawl"
  preprocessing_required: true
  notes:
    - "Validity benchmark and preprocessor are ALWAYS run automatically"
    - "Uses short-BAWL fingerprinting for novelty, uniqueness, and SUN metrics"
    - "Requires fingerprint preprocessing for novelty/uniqueness/SUN benchmarks"
    - "Runs all benchmark families by default for comprehensive evaluation"
    - "Use --families argument to specify only specific families (excluding validity)"
    - "Available families: distribution, diversity, novelty, uniqueness, hhi, sun, stability"
    - "Automatically runs appropriate preprocessors based on selected families"
    - "Optimized for speed with fingerprint caching and parallel computation"
  performance_characteristics:
    - "Fast preprocessing: fingerprints computed once and cached"
    - "Fast comparisons: hash-based similarity checking"
    - "Memory efficient: compact fingerprint storage"
    - "Scalable: linear time complexity for comparisons"
  recommended_usage:
    - "Large datasets (>1000 structures)"
    - "Repeated evaluations on same structures"
    - "When computational speed is prioritized"
    - "Standard materials discovery workflows"